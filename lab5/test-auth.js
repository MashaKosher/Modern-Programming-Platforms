// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
// –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node test-auth.js

const fetch = require('node-fetch');

const API_BASE = 'http://localhost:3001/v2';

async function testAuth() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...\n');

    try {
        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
        console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞...');
        const healthResponse = await fetch(`${API_BASE}/health`);
        const healthData = await healthResponse.json();
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç:', healthData.data.status);

        // 2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('\n2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        const registerResponse = await fetch(`${API_BASE}/auth/register`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                username: 'testuser2',
                password: 'testpass123'
            })
        });
        const registerData = await registerResponse.json();

        if (registerResponse.ok) {
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', registerData.data.user.username);
            const token = registerData.data.token;
            console.log('‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω');

            // 3. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            console.log('\n3. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
            const loginResponse = await fetch(`${API_BASE}/auth/login`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    username: 'testuser2',
                    password: 'testpass123'
                })
            });
            const loginData = await loginResponse.json();

            if (loginResponse.ok) {
                console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
                const newToken = loginData.data.token;

                // 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                console.log('\n4. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...');
                const userResponse = await fetch(`${API_BASE}/auth/me`, {
                    headers: { 'Authorization': `Bearer ${newToken}` }
                });
                const userData = await userResponse.json();

                if (userResponse.ok) {
                    console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ–ª—É—á–µ–Ω–∞:');
                    console.log('   - ID:', userData.data.id);
                    console.log('   - –ò–º—è:', userData.data.username);
                    console.log('   - Email:', userData.data.email);

                    // 5. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
                    console.log('\n5. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏...');
                    const taskResponse = await fetch(`${API_BASE}/tasks`, {
                        method: 'POST',
                        headers: {
                            'Authorization': `Bearer ${newToken}`,
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            title: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞',
                            dueDate: '2024-12-31'
                        })
                    });
                    const taskData = await taskResponse.json();

                    if (taskResponse.ok) {
                        console.log('‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞:', taskData.data.title);

                        // 6. –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        console.log('\n6. –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
                        const tasksResponse = await fetch(`${API_BASE}/tasks`, {
                            headers: { 'Authorization': `Bearer ${newToken}` }
                        });
                        const tasksData = await tasksResponse.json();

                        if (tasksResponse.ok) {
                            console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–¥–∞—á: ${tasksData.data.tasks.length}`);
                            console.log('–ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞:', tasksData.data.tasks[0]?.title);

                            console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
                        } else {
                            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á:', tasksData.message);
                        }
                    } else {
                        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', taskData.message);
                    }
                } else {
                    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData.message);
                }
            } else {
                console.log('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', loginData.message);
            }
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', registerData.message);
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
        console.log('\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
        console.log('- –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω');
        console.log('- –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—Ç (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 3001)');
        console.log('- –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é');
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testAuth();
