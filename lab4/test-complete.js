// –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç API Todo –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
// –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node test-complete.js
// –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–∞ http://localhost:3001
// –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–ª—è —Ä–∞–±–æ—Ç—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è node-fetch: npm install node-fetch

const http = require('http');
const { URL } = require('url');

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ (–∑–∞–º–µ–Ω–∞ node-fetch)
function fetch(url, options = {}) {
    return new Promise((resolve, reject) => {
        const parsedUrl = new URL(url);
        const reqOptions = {
            hostname: parsedUrl.hostname,
            port: parsedUrl.port,
            path: parsedUrl.pathname + parsedUrl.search,
            method: options.method || 'GET',
            headers: options.headers || {}
        };

        if (options.body) {
            reqOptions.headers['Content-Length'] = Buffer.byteLength(options.body);
        }

        const req = http.request(reqOptions, (res) => {
            let data = '';
            res.on('data', (chunk) => data += chunk);
            res.on('end', () => {
                try {
                    const json = JSON.parse(data);
                    resolve({
                        ok: res.statusCode >= 200 && res.statusCode < 300,
                        status: res.statusCode,
                        json: () => Promise.resolve(json)
                    });
                } catch {
                    resolve({
                        ok: res.statusCode >= 200 && res.statusCode < 300,
                        status: res.statusCode,
                        json: () => Promise.resolve(data)
                    });
                }
            });
        });

        req.on('error', reject);

        if (options.body) {
            req.write(options.body);
        }

        req.end();
    });
}

const API_BASE = 'http://localhost:3001/v2';

async function testCompleteAPI() {
    console.log('üß™ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Todo API —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π...\n');

    try {
        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
        console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞...');
        const healthResponse = await fetch(`${API_BASE}/health`);
        const healthData = await healthResponse.json();
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç:', healthData.data?.status || 'OK');
        console.log('   –í–µ—Ä—Å–∏—è:', healthData.data?.version || 'N/A');
        console.log('   –†–µ–∂–∏–º:', healthData.data?.environment || 'N/A');

        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...');
        const apiResponse = await fetch(`${API_BASE}/`);
        const apiData = await apiResponse.json();
        console.log('‚úÖ API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞');
        console.log('   –ù–∞–∑–≤–∞–Ω–∏–µ:', apiData.data?.name || 'Todo API');
        console.log('   –ü—Ä–µ—Ñ–∏–∫—Å:', apiData.data?.apiPrefix || '/v2');

        // 3. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('\n3. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        const registerResponse = await fetch(`${API_BASE}/auth/register`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                username: 'testuser_api',
                password: 'testpass123'
            })
        });
        const registerData = await registerResponse.json();

        if (registerResponse.ok) {
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', registerData.data.user.username);
            const token = registerData.data.token;
            console.log('‚úÖ JWT —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω');

            // 4. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            console.log('\n4. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
            const loginResponse = await fetch(`${API_BASE}/auth/login`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    username: 'testuser_api',
                    password: 'testpass123'
                })
            });
            const loginData = await loginResponse.json();

            if (loginResponse.ok) {
                console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
                const authToken = loginData.data.token;

                // 5. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                console.log('\n5. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...');
                const userResponse = await fetch(`${API_BASE}/auth/me`, {
                    headers: { 'Authorization': `Bearer ${authToken}` }
                });
                const userData = await userResponse.json();

                if (userResponse.ok) {
                    console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
                    console.log('   - ID:', userData.data.id);
                    console.log('   - –ò–º—è:', userData.data.username);
                    console.log('   - –°–æ–∑–¥–∞–Ω:', new Date(userData.data.createdAt).toLocaleDateString());

                    // 6. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á
                    console.log('\n6. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á...');
                    const tasks = [
                        '–ò–∑—É—á–∏—Ç—å React',
                        '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö',
                        '–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API'
                    ];

                    const createdTasks = [];
                    for (const taskTitle of tasks) {
                        const taskResponse = await fetch(`${API_BASE}/tasks`, {
                            method: 'POST',
                            headers: {
                                'Authorization': `Bearer ${authToken}`,
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                title: taskTitle,
                                dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
                            })
                        });
                        const taskData = await taskResponse.json();

                        if (taskResponse.ok) {
                            createdTasks.push(taskData.data);
                            console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–∞: "${taskTitle}"`);
                        } else {
                            console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è "${taskTitle}":`, taskData.message);
                        }
                    }

                    // 7. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á
                    console.log('\n7. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
                    const tasksResponse = await fetch(`${API_BASE}/tasks`, {
                        headers: { 'Authorization': `Bearer ${authToken}` }
                    });
                    const tasksData = await tasksResponse.json();

                    if (tasksResponse.ok) {
                        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–¥–∞—á: ${tasksData.data.tasks.length}`);
                        console.log('   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', tasksData.data.stats);

                        // 8. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞
                        console.log('\n8. –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á...');
                        const searchResponse = await fetch(`${API_BASE}/tasks/search?q=React`, {
                            headers: { 'Authorization': `Bearer ${authToken}` }
                        });
                        const searchData = await searchResponse.json();

                        if (searchResponse.ok) {
                            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: ${searchData.data.count}`);
                        }

                        // 9. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
                        console.log('\n9. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤...');
                        const activeResponse = await fetch(`${API_BASE}/tasks/status/active`, {
                            headers: { 'Authorization': `Bearer ${authToken}` }
                        });
                        const activeData = await activeResponse.json();

                        if (activeResponse.ok) {
                            console.log(`‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: ${activeData.data.count}`);
                        }

                        // 10. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
                        if (createdTasks.length > 0) {
                            console.log('\n10. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏...');
                            const updateResponse = await fetch(`${API_BASE}/tasks/${createdTasks[0].id}`, {
                                method: 'PUT',
                                headers: {
                                    'Authorization': `Bearer ${authToken}`,
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    title: '–ò–∑—É—á–∏—Ç—å React (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)',
                                    completed: true
                                })
                            });
                            const updateData = await updateResponse.json();

                            if (updateResponse.ok) {
                                console.log('‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
                            }

                            // 11. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ (–∏–º–∏—Ç–∞—Ü–∏—è)
                            console.log('\n11. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤...');
                            const formData = new FormData();
                            formData.append('file', Buffer.from('test content'), {
                                filename: 'test.txt',
                                contentType: 'text/plain'
                            });

                            // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã POST –∑–∞–ø—Ä–æ—Å —Å FormData
                            console.log('   üìé –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞');

                            // 12. –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
                            console.log('\n12. –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏...');
                            const deleteResponse = await fetch(`${API_BASE}/tasks/${createdTasks[0].id}`, {
                                method: 'DELETE',
                                headers: { 'Authorization': `Bearer ${authToken}` }
                            });
                            const deleteData = await deleteResponse.json();

                            if (deleteResponse.ok) {
                                console.log('‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞');
                            }
                        }

                        console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
                        console.log('\nüìä –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
                        console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userData.data.username}`);
                        console.log(`   - –ó–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–æ: ${createdTasks.length}`);
                        console.log(`   - –ó–∞–¥–∞—á –≤ —Å–∏—Å—Ç–µ–º–µ: ${tasksData.data.tasks.length}`);
                        console.log(`   - API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: ‚úÖ`);
                    } else {
                        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á:', tasksData.message);
                    }
                } else {
                    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', userData.message);
                }
            } else {
                console.log('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', loginData.message);
            }
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', registerData.message);
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
        console.log('\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
        console.log('- –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3001');
        console.log('- –§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:5173');
        console.log('- –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é –∏–ª–∏ firewall');
        console.log('\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:');
        console.log('  cd server && npm run dev');
        console.log('–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞:');
        console.log('  npm run dev');
    }
}

// –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
testCompleteAPI();
