// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ middleware –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
// –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node test-middleware.cjs

const { authenticateToken } = require('./server/src/middleware/auth.js');

// –ú–æ–∫–∞–µ–º –æ–±—ä–µ–∫—Ç—ã req, res, next
const createMockReq = (authHeader) => ({
    headers: authHeader ? { authorization: authHeader } : {}
});

const createMockRes = () => {
    const res = {};
    res.status = (code) => {
        res.statusCode = code;
        return res;
    };
    res.json = (data) => {
        res.responseData = data;
        return res;
    };
    return res;
};

const createMockNext = () => {
    let called = false;
    const next = () => {
        called = true;
    };
    next.called = () => called;
    return next;
};

async function testMiddleware() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ middleware –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...\n');

    // –¢–µ—Å—Ç 1: –ó–∞–ø—Ä–æ—Å –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
    console.log('1. –¢–µ—Å—Ç: –ó–∞–ø—Ä–æ—Å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞');
    const req1 = createMockReq();
    const res1 = createMockRes();
    const next1 = createMockNext();

    await authenticateToken(req1, res1, next1);

    console.log('   Status:', res1.statusCode);
    console.log('   Message:', res1.responseData?.message);
    console.log('   Next called:', next1.called() ? '‚úÖ' : '‚ùå');
    console.log('');

    // –¢–µ—Å—Ç 2: –ó–∞–ø—Ä–æ—Å —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º —Ç–æ–∫–µ–Ω–∞
    console.log('2. –¢–µ—Å—Ç: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞');
    const req2 = createMockReq('InvalidToken');
    const res2 = createMockRes();
    const next2 = createMockNext();

    await authenticateToken(req2, res2, next2);

    console.log('   Status:', res2.statusCode);
    console.log('   Message:', res2.responseData?.message);
    console.log('   Next called:', next2.called() ? '‚úÖ' : '‚ùå');
    console.log('');

    // –¢–µ—Å—Ç 3: –ó–∞–ø—Ä–æ—Å —Å –ø—É—Å—Ç—ã–º —Ç–æ–∫–µ–Ω–æ–º
    console.log('3. –¢–µ—Å—Ç: –ü—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω');
    const req3 = createMockReq('Bearer ');
    const res3 = createMockRes();
    const next3 = createMockNext();

    await authenticateToken(req3, res3, next3);

    console.log('   Status:', res3.statusCode);
    console.log('   Message:', res3.responseData?.message);
    console.log('   Next called:', next3.called() ? '‚úÖ' : '‚ùå');
    console.log('');

    // –¢–µ—Å—Ç 4: –¢–µ—Å—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º Bearer —Ç–æ–∫–µ–Ω–æ–º (–∏–º–∏—Ç–∞—Ü–∏—è)
    console.log('4. –¢–µ—Å—Ç: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π Bearer —Ç–æ–∫–µ–Ω (–∏–º–∏—Ç–∞—Ü–∏—è)');
    console.log('   –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã JWT —Ç–æ–∫–µ–Ω, –Ω–æ –≤ —Ç–µ—Å—Ç–µ –º—ã –ø—Ä–æ–≤–µ—Ä–∏–º —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç');

    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ middleware –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìù –í—ã–≤–æ–¥:');
    console.log('   - Middleware –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç–æ–∫–µ–Ω–∞ (401)');
    console.log('   - Middleware –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞');
    console.log('   - –í —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º JWT —Ç–æ–∫–µ–Ω–æ–º middleware –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å');
}

testMiddleware().catch(console.error);
