#!/usr/bin/env node

const sqlite3 = require('sqlite3').verbose();
const path = require('path');

const dbPath = path.join(__dirname, 'data/tasks.db');

console.log('üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite');
console.log('–ü—É—Ç—å –∫ –ë–î:', dbPath);
console.log('');

const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err.message);
        process.exit(1);
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    console.log('');
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏
    db.all("SELECT * FROM tasks ORDER BY createdAt DESC", (err, rows) => {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á:', err.message);
        } else {
            console.log('üìã –ó–ê–î–ê–ß–ò:');
            console.table(rows);
        }
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è
        db.all("SELECT * FROM attachments ORDER BY uploadedAt DESC", (err, rows) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–∏–π:', err.message);
            } else {
                console.log('üìé –í–õ–û–ñ–ï–ù–ò–Ø:');
                if (rows.length > 0) {
                    console.table(rows);
                } else {
                    console.log('–ù–µ—Ç –≤–ª–æ–∂–µ–Ω–∏–π');
                }
            }
            
            // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            db.get(`
                SELECT 
                    COUNT(*) as total,
                    SUM(CASE WHEN completed = 1 THEN 1 ELSE 0 END) as completed,
                    SUM(CASE WHEN completed = 0 THEN 1 ELSE 0 END) as active,
                    SUM(CASE WHEN completed = 0 AND dueDate < datetime('now') THEN 1 ELSE 0 END) as overdue
                FROM tasks
            `, (err, row) => {
                if (err) {
                    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err.message);
                } else {
                    console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
                    console.table([row]);
                }
                
                db.close((err) => {
                    if (err) {
                        console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err.message);
                    } else {
                        console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
                    }
                });
            });
        });
    });
});
