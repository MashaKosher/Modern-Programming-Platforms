const express = require('express');
const http = require('http');
const path = require('path');
const fs = require('fs');

// –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const config = require('./config/config');

// –ò–º–ø–æ—Ä—Ç middleware
const {
    notFound,
    errorHandler,
    requestLogger,
    validateJSON
} = require('./src/middleware/errorHandler');

const {
    generalLimiter,
    securityHeaders,
    sanitizeInput,
    logSuspiciousActivity,
    validateRequestSize,
    corsWithValidation
} = require('./src/middleware/security');

// –ò–º–ø–æ—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤
const routes = require('./src/routes/index');

// –°–æ–∑–¥–∞–Ω–∏–µ Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();
const server = http.createServer(app);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Å–µ—Ä–≤–µ—Ä–∞
const WebSocketServer = require('./src/services/WebSocketServer');
const wsServer = new WebSocketServer(server);

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
const createDirectories = () => {
    const directories = [
        path.join(__dirname, 'uploads'),
        path.join(__dirname, 'data'),
        path.join(__dirname, 'logs')
    ];

    directories.forEach(dir => {
        if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir, { recursive: true });
            console.log(`–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dir}`);
        }
    });
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
createDirectories();

// –ë–∞–∑–æ–≤—ã–µ middleware
app.use(requestLogger);
app.use(securityHeaders);
app.use(corsWithValidation);

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));
app.use(validateJSON);

// Middleware –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
app.use(validateRequestSize);
app.use(sanitizeInput);
app.use(logSuspiciousActivity);

// Rate limiting
if (config.isProduction()) {
    app.use(generalLimiter);
}

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (–¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç API —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
app.use(config.app.apiPrefix, routes);

// –ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç
app.get('/', (req, res) => {
    res.json({
        success: true,
        data: {
            message: 'Todo API Server',
            version: config.app.version,
            apiPrefix: config.app.apiPrefix,
            documentation: `${req.protocol}://${req.get('host')}${config.app.apiPrefix}`,
            health: `${req.protocol}://${req.get('host')}${config.app.apiPrefix}/health`
        }
    });
});

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
app.use(notFound);
app.use(errorHandler);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è graceful shutdown
const gracefulShutdown = (signal) => {
    console.log(`\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...`);
    
    server.close(() => {
        console.log('HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç');
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î, –æ—á–∏—Å—Ç–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ —Ç.–¥.
        
        console.log('–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É');
        process.exit(0);
    });
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        console.error('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞');
        process.exit(1);
    }, 30000);
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
process.on('SIGINT', () => gracefulShutdown('SIGINT'));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
    console.error('üö® –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    gracefulShutdown('UNCAUGHT_EXCEPTION');
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('üö® –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ Promise:', reason);
    console.error('Promise:', promise);
    gracefulShutdown('UNHANDLED_REJECTION');
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.listen(config.port, () => {
    console.log('\n===================================');
    console.log(`üì± ${config.app.name} v${config.app.version}`);
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${config.port}`);
    console.log(`API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${config.port}${config.app.apiPrefix}`);
    console.log(`WebSocket: ws://localhost:${config.port}/ws`);
    console.log(`üíö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: http://localhost:${config.port}${config.app.apiPrefix}/health`);
    console.log(`–†–µ–∂–∏–º: ${config.nodeEnv}`);
    console.log(`–ó–∞–≥—Ä—É–∑–∫–∏: ${path.join(__dirname, 'uploads')}`);
    console.log('–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C');
    console.log('===================================\n');
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
module.exports = app;
