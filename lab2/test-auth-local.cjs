// –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–±–µ–∑ —Å–µ—Ä–≤–µ—Ä–∞)
// –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node test-auth-local.cjs

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...\n');

// –ò–º–∏—Ç–∏—Ä—É–µ–º localStorage
const mockLocalStorage = {
    data: {},
    getItem: function(key) {
        return this.data[key] || null;
    },
    setItem: function(key, value) {
        this.data[key] = value;
    },
    removeItem: function(key) {
        delete this.data[key];
    },
    clear: function() {
        this.data = {};
    }
};

// –ú–æ–∫–∞–µ–º AuthService
class MockAuthService {
    constructor() {
        this.jwtSecret = 'test-secret-key';
        this.jwtExpiresIn = '7d';
    }

    getToken() {
        return mockLocalStorage.getItem('authToken');
    }

    getCurrentUserFromStorage() {
        const userStr = mockLocalStorage.getItem('user');
        return userStr ? JSON.parse(userStr) : null;
    }

    isAuthenticated() {
        return !!this.getToken();
    }

    getAuthHeaders() {
        const token = this.getToken();
        console.log('AuthService.getAuthHeaders() - —Ç–æ–∫–µ–Ω:', token ? '–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        if (token) {
            console.log('–î–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞:', token.length);
        }
        return token ? {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json',
        } : {
            'Content-Type': 'application/json',
        };
    }

    logout() {
        mockLocalStorage.removeItem('authToken');
        mockLocalStorage.removeItem('user');
    }
}

const authService = new MockAuthService();

console.log('1. –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞');
console.log('   isAuthenticated():', authService.isAuthenticated());
console.log('   getAuthHeaders():', authService.getAuthHeaders());
console.log('');

console.log('2. –¢–µ—Å—Ç: –°–∏–º—É–ª—è—Ü–∏—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É');
mockLocalStorage.setItem('authToken', 'fake-jwt-token-123456789');
mockLocalStorage.setItem('user', JSON.stringify({
    id: 1,
    username: 'testuser',
    email: 'test@example.com',
    createdAt: new Date()
}));

console.log('   –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage');
console.log('   isAuthenticated():', authService.isAuthenticated());
console.log('   getAuthHeaders():', authService.getAuthHeaders());
console.log('');

console.log('3. –¢–µ—Å—Ç: –°–∏–º—É–ª—è—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
authService.logout();
console.log('   isAuthenticated():', authService.isAuthenticated());
console.log('   getAuthHeaders():', authService.getAuthHeaders());
console.log('');

console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
console.log('\nüìù –í—ã–≤–æ–¥:');
console.log('   - AuthService —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ');
console.log('   - –¢–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏ –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
console.log('   - –í —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ä–µ–¥–µ –ø—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤:');
console.log('     * localStorage –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
console.log('     * –¢–æ–∫–µ–Ω –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
console.log('     * –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω');
