// –¢–µ—Å—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏...\n');

// –ò–º–∏—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 2 (masha)
const jwt = require('jsonwebtoken');
const AuthService = require('./server/src/services/AuthService');
const TaskController = require('./server/src/controllers/TaskController');

async function testToggle() {
    try {
        console.log('üîê –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞...');

        // –°–æ–∑–¥–∞–µ–º AuthService –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
        const authService = new AuthService();

        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è masha (ID: 2)
        const user = { id: 2, username: 'masha' };
        const token = jwt.sign({ userId: user.id }, authService.jwtSecret, { expiresIn: '7d' });

        console.log('‚úÖ –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω:', token.substring(0, 50) + '...');
        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user.username, '(ID:', user.id, ')');

        // –°–æ–∑–¥–∞–µ–º TaskController
        const taskController = new TaskController();

        // –ò–º–∏—Ç–∏—Ä—É–µ–º Express request object
        const mockReq = {
            params: { id: '4' },
            userId: user.id,
            user: user,
            headers: { authorization: `Bearer ${token}` }
        };

        // –ò–º–∏—Ç–∏—Ä—É–µ–º Express response object
        const mockRes = {
            status: function(code) {
                this.statusCode = code;
                return this;
            },
            json: function(data) {
                console.log(`üì§ Response (${this.statusCode || 200}):`, JSON.stringify(data, null, 2));
                return this;
            }
        };

        console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ 4...');

        // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ toggleTask –Ω–∞–ø—Ä—è–º—É—é
        await taskController.toggleTask(mockReq, mockRes);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
        console.error('Stack:', error.stack);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testToggle();
